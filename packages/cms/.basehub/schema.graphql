enum AnalyticsKeyScope {
  query
  send
}

type Authors implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: AuthorsItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [AuthorsItem!]!
}

""""""
type AuthorsItem implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  avatar: BlockImage!
  xUrl: String
}

input AuthorsItemFilterInput {
  AND: AuthorsItemFilterInput
  OR: AuthorsItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  xUrl: StringFilter
}

enum AuthorsItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  avatar__ASC
  avatar__DESC
  xUrl__ASC
  xUrl__DESC
}

"""
{"schemaType":"({\n  name: string;\n  required: boolean;\n  placeholder?: string;\n  defaultValue?: string;\n  helpText?: string\n} & {\n  id: string;\n  label: string\n} & ({\n  type: \"text\" | \"textarea\" | \"number\" | \"file\" | \"date\" | \"datetime\" | \"email\" | \"checkbox\" | \"hidden\"\n} | {\n  type: \"select\" | \"radio\";\n  options: string[];\n  multiple: boolean\n}))[]"}
"""
scalar BSHBEventSchema

"""{"schemaType":"RichTextNode[]"}"""
scalar BSHBRichTextContentSchema

"""{"schemaType":"RichTextTocNode[]"}"""
scalar BSHBRichTextTOCSchema

type BaseRichTextJson implements RichTextJson {
  blocks: String!
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

type BlockAudio {
  fileName: String!
  fileSize: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
}

type BlockCodeSnippet {
  allowedLanguages: [CodeSnippetLanguage!]!
  code: String!
  html(
    """Theme for the code snippet"""
    theme: String = "github-dark"
  ): String! @deprecated(reason: "Figuring out the correct api.")
  language: CodeSnippetLanguage!
}

type BlockColor {
  b: Int!
  g: Int!
  hex: String!
  hsl: String!
  r: Int!
  rgb: String!
}

interface BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

type BlockDocumentSys {
  apiNamePath: String!
  createdAt: String!
  hash: String!
  id: ID!
  idPath: String!
  lastModifiedAt: String!
  slug: String!
  slugPath: String!
  title: String!
}

type BlockFile {
  fileName: String!
  fileSize: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
}

type BlockImage {
  alt: String
  aspectRatio: String!
  blurDataURL: String!
  fileName: String!
  fileSize: Int!
  height: Int!
  lastModified: Float!
  mimeType: String!
  placeholderURL: String! @deprecated(reason: "Renamed to `blurDataURL` to match Next.js Image's naming convention.")
  rawUrl: String! @deprecated(reason: "Use `url` instead.")
  thumbhash: String!

  "This field is used to generate the image URL with the provided options. The options are passed as arguments. For example, if you want to resize the image to 200x200 pixels, you can use the following query:\n\n```graphql\n{\n  blockImage {\n    url(width: 200, height: 200)\n  }\n}\n```\n\nThis will return the URL with the width and height set to 200 pixels.\n\nBaseHub uses Cloudflare for image resizing. Check out [all available options in their docs](https://developers.cloudflare.com/images/transform-images/transform-via-workers/#fetch-options).\n"
  url(anim: String, background: String, blur: Int, border: String, brightness: Int, compression: String, contrast: Int, dpr: Int, fit: String, format: String, gamma: String, gravity: String, height: Int, metadata: String, quality: Int, rotate: String, sharpen: String, trim: String, width: Int): String!
  width: Int!
}

interface BlockList implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

type BlockOgImage {
  url: String!
}

"""Rich text block"""
interface BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: RichTextJson!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type BlockVideo {
  aspectRatio: String!

  """
  The duration of the video in seconds. If the duration is not available, it will be estimated based on the file size.
  """
  duration: Float!
  fileName: String!
  fileSize: Int!
  height: Int!
  lastModified: Float!
  mimeType: String!
  url: String!
  width: Int!
}

type Blog implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  authors(
    """Filter by a field."""
    filter: AuthorsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: AuthorsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Authors!
  categories(
    """Filter by a field."""
    filter: CategoriesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: CategoriesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Categories!
  posts(
    """Filter by a field."""
    filter: PostsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: PostsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Posts!
}

type Body implements BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: BodyRichText!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type BodyRichText implements RichTextJson {
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

type Body_1 implements BlockRichText {
  html(
    """
    It automatically generates a unique id for each heading present in the HTML. Enabled by default.
    """
    slugs: Boolean = true

    """Inserts a table of contents at the beginning of the HTML."""
    toc: Boolean = false
  ): String!
  json: Body_1RichText!
  markdown: String!
  plainText: String!
  readingTime(
    """Words per minute, defaults to average 183wpm"""
    wpm: Int = 183
  ): Int!
}

type Body_1RichText implements RichTextJson {
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

type Categories implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: CategoriesItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [CategoriesItem!]!
}

""""""
type CategoriesItem implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
}

input CategoriesItemFilterInput {
  AND: CategoriesItemFilterInput
  OR: CategoriesItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
}

enum CategoriesItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
}

"""{"schemaType":"string"}"""
scalar CodeSnippetLanguage

input DateFilter {
  eq: DateTime
  isAfter: DateTime
  isBefore: DateTime
  neq: DateTime
  onOrAfter: DateTime
  onOrBefore: DateTime
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

scalar JSON

type LegalPages implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: LegalPagesItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [LegalPagesItem!]!
}

""""""
type LegalPagesItem implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  body: Body_1!
  description: String!
}

input LegalPagesItemFilterInput {
  AND: LegalPagesItemFilterInput
  OR: LegalPagesItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  description: StringFilter
}

enum LegalPagesItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  body__ASC
  body__DESC
  description__ASC
  description__DESC
}

input ListFilter {
  isEmpty: Boolean
  length: Int
}

type ListMeta {
  totalCount: Int!
}

input NumberFilter {
  eq: Float
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  neq: Float
}

type Posts implements BlockDocument & BlockList {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _meta: ListMeta!

  """The key used to search from the frontend."""
  _searchKey: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!

  """
  Returns the first item in the list, or null if the list is empty. Useful when you expect only one result.
  """
  item: PostsItem

  """
  Returns the list of items after filtering and paginating according to the arguments sent by the client.
  """
  items: [PostsItem!]!
}

""""""
type PostsItem implements BlockDocument {
  _analyticsKey(
    """
    The scope of the analytics key. Use `send` for just ingesting data. Use `query` if you need to show an analytics data in your website.
    
    Have in mind, if you expose your `query` analytics key in the frontend, you'll be exposing all of this block's analytics data to the public. This is generally safe, but it might not be in your case.
    """
    scope: AnalyticsKeyScope = send
  ): String!
  _id: String!
  _idPath: String!
  _slug: String!
  _slugPath: String!
  _sys: BlockDocumentSys!
  _title: String!
  authors: [AuthorsItem!]!
  body: Body!
  categories: [CategoriesItem!]

  """ISO 8601 date string."""
  date: String!
  description: String!
  image: BlockImage!
}

input PostsItemFilterInput {
  AND: PostsItemFilterInput
  OR: PostsItemFilterInput
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  authors: PostsItemFilterInput__authors_0___untitled
  categories: PostsItemFilterInput__categories_0___untitled
  date: DateFilter
  description: StringFilter
}

input PostsItemFilterInput__authors_0___untitled {
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
  xUrl: StringFilter
}

input PostsItemFilterInput__categories_0___untitled {
  _sys_apiNamePath: StringFilter
  _sys_createdAt: DateFilter
  _sys_hash: StringFilter
  _sys_id: StringFilter
  _sys_idPath: StringFilter
  _sys_lastModifiedAt: DateFilter
  _sys_slug: StringFilter
  _sys_slugPath: StringFilter
  _sys_title: StringFilter
}

enum PostsItemOrderByEnum {
  _sys_createdAt__ASC
  _sys_createdAt__DESC
  _sys_hash__ASC
  _sys_hash__DESC
  _sys_id__ASC
  _sys_id__DESC
  _sys_lastModifiedAt__ASC
  _sys_lastModifiedAt__DESC
  _sys_slug__ASC
  _sys_slug__DESC
  _sys_title__ASC
  _sys_title__DESC
  authors__ASC
  authors__DESC
  body__ASC
  body__DESC
  categories__ASC
  categories__DESC
  date__ASC
  date__DESC
  description__ASC
  description__DESC
  image__ASC
  image__DESC
}

type Query {
  """
  Query across all of the instances of a component. Pass in filters and sorts if you want, and get each instance via the `items` key.
  """
  _componentInstances: _components!
  _sys: RepoSys!
  blog: Blog!
  legalPages(
    """Filter by a field."""
    filter: LegalPagesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: LegalPagesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): LegalPages!
}

type RepoSys {
  hash: String!
  id: ID!
  slug: String!
  title: String!
}

interface RichTextJson {
  content: BSHBRichTextContentSchema!
  toc: BSHBRichTextTOCSchema!
}

input StringFilter {
  contains: String
  endsWith: String
  eq: String
  matches: StringMatchesFilter
  notEq: String
  startsWith: String
}

input StringMatchesFilter {
  caseSensitive: Boolean = true
  pattern: String!
}

type Variant {
  apiName: String!
  color: String!
  id: String!
  isDefault: Boolean!
  label: String!
}

type _components {
  authorsItem(
    """Filter by a field."""
    filter: AuthorsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: AuthorsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Authors!
  categoriesItem(
    """Filter by a field."""
    filter: CategoriesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: CategoriesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Categories!
  legalPagesItem(
    """Filter by a field."""
    filter: LegalPagesItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: LegalPagesItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): LegalPages!
  postsItem(
    """Filter by a field."""
    filter: PostsItemFilterInput

    """Limit the number of items returned. Defaults to 500."""
    first: Int = 500

    """Order by a field."""
    orderBy: PostsItemOrderByEnum

    """Skip the first n items."""
    skip: Int = 0
  ): Posts!
}